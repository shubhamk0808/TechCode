We will be using java bean validation for back-end validation before moving to any business logic on the user provided data.
For that, spring-boot-starter-validation dependency can be used. It contains Jakarta Bean validation, as well as the transitive dependency of hibernate-validator.

@NotNull : Checks if a given field is not null but allows empty values & zero elements inside collections.

@NotEmpty : Checks if a given field is not null and its size/length is greater than zero.

@NotBlank : Checks if a given field is not null and trimmed length is greater than zero, i.e. it doesn't allow blank characters like space, tab, etc.

@Size : Size validates that the annotated property value has a size between the attributes min and max (included). 

@Email : The string has to be a well-formed email address. Exact semantics of what makes up a valid email address are left to Jakarta Bean Validation providers.

@Past and @PastOrPresent :  validate that a date value is in the past or the past including the present; can be applied to date types including those added in Java 8.

@Future and @FutureOrPresent :  validate that a date value is in the future, or in the future including the present.


Steps for bean validation : 

i)	Add the dependency for starter-validation in pom.xml.
ii) Define all the required annotation(s) on top of fields in the POJO class (ex : Contacts.java).
iii)Pass the new blank object of that specific model each time at time of page load as an attribute (ContactController.java). This will indicate that the concerned form will hold some data, and that needs to be validated.
iv)	Link the passed bean into form by using object tag of thymeleaf in our view (ex : contact.html). Further, we also need to link the fields for validation by using name tag of thymeleaf.	
v)	Add @Valid annotation as method parameter for the method which accepts the user form. @ModelAttribue will be used to get the filled bean attribute(ex : contact) that was passed as blank at time of page display. 
	Also, in case of any validation failure, Spring will create the Errors object. so add one Errors class object to catch those error. 
vi) In case of any error, that should be logged and displayed to user, so that error object has to be parsed and displayed in the view using Thymeleaf.
vii)In case of no error, perform the required business logic.

Note : returning "redirect:/contact" will display the blank new contact page, where as returning "contact" will display the same form that user had submitted earlier.      

 
   

